from builtins import dict as _Dict
from pathlib import Path as PathType

# @overload
# def env(var: str, cast: type[str]) -> str: ...
# @overload
# def env(var: str, cast: type[bool]) -> bool: ...
from typing import Any, TypeVar, overload
from urllib.parse import ParseResult

_T = TypeVar("_T")

class NoValue: ...

type _BuiltinStr = str

class Env:
    ENVIRON: dict[str, str]
    NOTSET: NoValue

    def __init__(
        self,
        **kwargs: (
            tuple[type[bool], bool]
            | tuple[type[str], str]
            | tuple[type[int], int]
            | tuple[type[float], float]
            | tuple[type[list[Any]], list[Any]]
        ),
    ) -> None: ...
    @overload
    def __call__(self, var: str, cast: type[str], default: str = ...) -> str: ...
    @overload
    def __call__(self, var: str, cast: type[bool], default: bool = ...) -> bool: ...
    @overload
    def __call__(self, var: str, cast: type[int], default: int = ...) -> int: ...
    @overload
    def __call__(self, var: str, cast: type[float], default: float = ...) -> float: ...
    @overload
    def __call__(self, var: str, cast: None = None, default: Any = ...) -> Any: ...
    def int(self, var: str, default: Any = ...) -> int: ...
    def float(self, var: str, default: Any = ...) -> float: ...
    def json(self, var: str, default: Any = ...) -> Any: ...
    def list(self, var: str, cast: type[_T] | None = None, default: Any = ...) -> list[_T]: ...
    def tuple(
        self, var: str, cast: type[_T] | None = None, default: Any = ...
    ) -> tuple[_T, ...]: ...
    def dict(self, var: str, cast: Any = dict, default: Any = ...) -> dict[str, Any]: ...
    def url(self, var: str, default: Any = ...) -> ParseResult: ...
    def db_url(
        self, var: str = ..., default: Any = ..., engine: str | None = None
    ) -> _Dict[str, Any]: ...
    def cache_url(
        self, var: str = ..., default: Any = ..., backend: str | None = None
    ) -> _Dict[str, Any]: ...
    def email_url(
        self, var: str = ..., default: Any = ..., backend: str | None = None
    ) -> _Dict[str, Any]: ...
    def path(self, var: str, default: Any = ..., **kwargs: Any) -> PathType: ...
    def db(
        self, var: str = ..., default: Any = ..., engine: str | None = None
    ) -> _Dict[str, Any]: ...
    def cache(
        self, var: str = ..., default: Any = ..., backend: str | None = None
    ) -> _Dict[str, Any]: ...
    def email(
        self, var: str = ..., default: Any = ..., backend: str | None = None
    ) -> _Dict[str, Any]: ...
    def str(self, var: str, default: Any = ..., multiline: bool = False) -> str: ...
    def bool(self, var: _BuiltinStr, default: Any = ...) -> bool: ...
