# Generated by Django 4.2 on 2023-04-25 08:19

import distance.fields
import django.db.models.deletion
import logger.validators
import tinymce.models
from django.conf import settings
from django.db import migrations, models


def change_tripreport_privacy(apps, schema_editor):
    TripReport = apps.get_model("logger", "TripReport")
    TripReport.objects.filter(privacy="Anyone, if they can view the trip").update(
        privacy="Default"
    )
    TripReport.objects.filter(privacy="Anyone, even if the trip is private").update(
        privacy="Public"
    )
    TripReport.objects.filter(privacy="Only my friends").update(privacy="Friends")
    TripReport.objects.filter(privacy="Only me").update(privacy="Private")


def set_all_duration_fields(apps, schema_editor):
    """Set the duration and duration_str on each trip by calling Trip.save()"""
    Trip = apps.get_model("logger", "Trip")
    for trip in Trip.objects.all():
        if not trip.duration:
            trip.set_duration()
        if not trip.duration_str:
            trip.set_duration_str()
        trip.save()


class Migration(migrations.Migration):
    replaces = [
        ("logger", "0001_initial"),
        ("logger", "0002_trip_aid_dist_units_trip_horizontal_dist_units_and_more"),
        ("logger", "0003_alter_trip_aid_dist_alter_trip_horizontal_dist_and_more"),
        ("logger", "0004_alter_trip_type"),
        ("logger", "0005_tripreport"),
        ("logger", "0006_remove_trip_report_url"),
        ("logger", "0007_alter_trip_cavers"),
        ("logger", "0008_alter_trip_privacy_alter_tripreport_privacy"),
        ("logger", "0009_trip_resurveyed_dist_trip_resurveyed_dist_units_and_more"),
        ("logger", "0010_alter_trip_type"),
        ("logger", "0011_trip_duration_trip_duration_str"),
        ("logger", "0012_set_all_duration_fields"),
        ("logger", "0013_alter_trip_cavers_alter_trip_clubs_and_more"),
        ("logger", "0014_alter_tripreport_unique_together_and_more"),
        ("logger", "0015_trip_likes_tripreport_likes"),
        ("logger", "0016_comment_comment_logger_comm_content_0ff2fc_idx"),
        ("logger", "0017_rename_comment_comment_content"),
        ("logger", "0018_alter_comment_options"),
    ]

    initial = True

    dependencies = [
        ("contenttypes", "0002_remove_content_type_name"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Trip",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "privacy",
                    models.CharField(
                        choices=[
                            ("Default", "Anyone who can view my profile"),
                            ("Public", "Anyone, even if my profile is private"),
                            ("Friends", "Only my friends"),
                            ("Private", "Only me"),
                        ],
                        default="Default",
                        max_length=10,
                        verbose_name="Who can view this trip?",
                    ),
                ),
                ("cave_name", models.CharField(max_length=100)),
                ("cave_region", models.CharField(blank=True, max_length=100)),
                ("cave_country", models.CharField(blank=True, max_length=100)),
                (
                    "cave_url",
                    models.URLField(
                        blank=True,
                        help_text="A website, such as a Wikipedia page, giving more information on this cave.",
                        verbose_name="cave website",
                    ),
                ),
                ("start", models.DateTimeField(verbose_name="start time")),
                (
                    "end",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="end time"
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("Sport", "Sport"),
                            ("Digging", "Digging"),
                            ("Survey", "Survey"),
                            ("Exploration", "Exploration"),
                            ("Aid climbing", "Aid climbing"),
                            ("Photography", "Photography"),
                            ("Training", "Training"),
                            ("Rescue", "Rescue"),
                            ("Science", "Science"),
                            ("Surface", "Surface"),
                            ("Other", "Other"),
                        ],
                        default="Sport",
                        max_length=15,
                    ),
                ),
                (
                    "cavers",
                    models.CharField(
                        blank=True,
                        help_text="A list of cavers that were on this trip.",
                        max_length=250,
                    ),
                ),
                (
                    "clubs",
                    models.CharField(
                        blank=True,
                        help_text="A list of any caving clubs associated with this trip.",
                        max_length=100,
                    ),
                ),
                (
                    "expedition",
                    models.CharField(
                        blank=True,
                        help_text="A list of any expeditions associated with this trip.",
                        max_length=100,
                    ),
                ),
                (
                    "added",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="trip added on"
                    ),
                ),
                (
                    "updated",
                    models.DateTimeField(
                        auto_now=True, verbose_name="trip last updated"
                    ),
                ),
                (
                    "horizontal_dist",
                    distance.fields.DistanceField(
                        blank=True,
                        decimal_places=6,
                        help_text="Horizontal distance covered.",
                        max_digits=14,
                        null=True,
                        unit="m",
                        unit_field="horizontal_dist_units",
                        validators=[
                            logger.validators.above_zero_dist_validator,
                            logger.validators.horizontal_dist_validator,
                        ],
                        verbose_name="horizontal distance",
                    ),
                ),
                (
                    "vert_dist_down",
                    distance.fields.DistanceField(
                        blank=True,
                        decimal_places=6,
                        help_text="Distance descended on rope.",
                        max_digits=14,
                        null=True,
                        unit="m",
                        unit_field="vert_dist_down_units",
                        validators=[
                            logger.validators.above_zero_dist_validator,
                            logger.validators.vertical_dist_validator,
                        ],
                        verbose_name="rope descent distance",
                    ),
                ),
                (
                    "vert_dist_up",
                    distance.fields.DistanceField(
                        blank=True,
                        decimal_places=6,
                        help_text="Distance ascended on rope.",
                        max_digits=14,
                        null=True,
                        unit="m",
                        unit_field="vert_dist_up_units",
                        validators=[
                            logger.validators.above_zero_dist_validator,
                            logger.validators.vertical_dist_validator,
                        ],
                        verbose_name="rope ascent distance",
                    ),
                ),
                (
                    "surveyed_dist",
                    distance.fields.DistanceField(
                        blank=True,
                        decimal_places=6,
                        help_text="Distance surveyed.",
                        max_digits=14,
                        null=True,
                        unit="m",
                        unit_field="surveyed_dist_units",
                        validators=[
                            logger.validators.above_zero_dist_validator,
                            logger.validators.horizontal_dist_validator,
                        ],
                        verbose_name="surveyed distance",
                    ),
                ),
                (
                    "aid_dist",
                    distance.fields.DistanceField(
                        blank=True,
                        decimal_places=6,
                        help_text="Distance covered by aid climbing.",
                        max_digits=14,
                        null=True,
                        unit="m",
                        unit_field="aid_dist_units",
                        validators=[
                            logger.validators.above_zero_dist_validator,
                            logger.validators.vertical_dist_validator,
                        ],
                        verbose_name="aid climbing distance",
                    ),
                ),
                ("notes", models.TextField(blank=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "aid_dist_units",
                    distance.fields.DistanceUnitField(
                        blank=True, editable=False, max_length=29, null=True
                    ),
                ),
                (
                    "horizontal_dist_units",
                    distance.fields.DistanceUnitField(
                        blank=True, editable=False, max_length=29, null=True
                    ),
                ),
                (
                    "surveyed_dist_units",
                    distance.fields.DistanceUnitField(
                        blank=True, editable=False, max_length=29, null=True
                    ),
                ),
                (
                    "vert_dist_down_units",
                    distance.fields.DistanceUnitField(
                        blank=True, editable=False, max_length=29, null=True
                    ),
                ),
                (
                    "vert_dist_up_units",
                    distance.fields.DistanceUnitField(
                        blank=True, editable=False, max_length=29, null=True
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="TripReport",
            fields=[
                (
                    "trip",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        related_name="report",
                        serialize=False,
                        to="logger.trip",
                    ),
                ),
                ("title", models.CharField(max_length=100)),
                (
                    "pub_date",
                    models.DateField(
                        help_text="The date which will be shown on the report.",
                        verbose_name="date published",
                    ),
                ),
                (
                    "slug",
                    models.SlugField(
                        help_text="A unique identifier for the URL of the report. No spaces or special characters allowed.",
                        max_length=100,
                    ),
                ),
                ("content", tinymce.models.HTMLField()),
                (
                    "added",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="report added on"
                    ),
                ),
                (
                    "updated",
                    models.DateTimeField(
                        auto_now=True, verbose_name="report last updated"
                    ),
                ),
                (
                    "privacy",
                    models.CharField(
                        default="Default",
                        max_length=40,
                        verbose_name="Who can view this trip?",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "unique_together": {("user", "slug")},
            },
        ),
        migrations.RunPython(
            code=change_tripreport_privacy,
        ),
        migrations.AlterField(
            model_name="tripreport",
            name="privacy",
            field=models.CharField(
                choices=[
                    ("Default", "Anyone who can view the trip"),
                    ("Public", "Anyone, even if the trip is private"),
                    ("Friends", "Only my friends"),
                    ("Private", "Only me"),
                ],
                default="Default",
                max_length=10,
                verbose_name="Who can view this report?",
            ),
        ),
        migrations.AddField(
            model_name="trip",
            name="resurveyed_dist",
            field=distance.fields.DistanceField(
                blank=True,
                decimal_places=6,
                help_text="Distance resurveyed.",
                max_digits=14,
                null=True,
                unit="m",
                unit_field="resurveyed_dist_units",
                validators=[
                    logger.validators.above_zero_dist_validator,
                    logger.validators.horizontal_dist_validator,
                ],
                verbose_name="resurveyed distance",
            ),
        ),
        migrations.AddField(
            model_name="trip",
            name="resurveyed_dist_units",
            field=distance.fields.DistanceUnitField(
                blank=True, editable=False, max_length=29, null=True
            ),
        ),
        migrations.AlterField(
            model_name="trip",
            name="surveyed_dist",
            field=distance.fields.DistanceField(
                blank=True,
                decimal_places=6,
                help_text="New passage surveyed.",
                max_digits=14,
                null=True,
                unit="m",
                unit_field="surveyed_dist_units",
                validators=[
                    logger.validators.above_zero_dist_validator,
                    logger.validators.horizontal_dist_validator,
                ],
                verbose_name="surveyed distance",
            ),
        ),
        migrations.AlterField(
            model_name="trip",
            name="type",
            field=models.CharField(
                choices=[
                    ("Sport", "Sport"),
                    ("Digging", "Digging"),
                    ("Survey", "Survey"),
                    ("Exploration", "Exploration"),
                    ("Aid climbing", "Aid climbing"),
                    ("Photography", "Photography"),
                    ("Training", "Training"),
                    ("Rescue", "Rescue"),
                    ("Science", "Science"),
                    ("Hauling", "Hauling"),
                    ("Rigging", "Rigging"),
                    ("Surface", "Surface"),
                    ("Other", "Other"),
                ],
                default="Sport",
                max_length=15,
            ),
        ),
        migrations.AddField(
            model_name="trip",
            name="duration",
            field=models.DurationField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="trip",
            name="duration_str",
            field=models.CharField(blank=True, max_length=100, null=True),
        ),
        migrations.RunPython(
            code=set_all_duration_fields,
        ),
        migrations.AlterField(
            model_name="trip",
            name="cavers",
            field=models.CharField(
                blank=True,
                help_text="A comma-separated list of cavers that were on this trip.",
                max_length=250,
            ),
        ),
        migrations.AlterField(
            model_name="trip",
            name="clubs",
            field=models.CharField(
                blank=True,
                help_text="A comma-separated list of any caving clubs associated with this trip.",
                max_length=100,
            ),
        ),
        migrations.AlterField(
            model_name="trip",
            name="expedition",
            field=models.CharField(
                blank=True,
                help_text="A comma-separated list of any expeditions associated with this trip.",
                max_length=100,
            ),
        ),
        migrations.AlterUniqueTogether(
            name="tripreport",
            unique_together=set(),
        ),
        migrations.AddConstraint(
            model_name="tripreport",
            constraint=models.UniqueConstraint(
                fields=("user", "slug"), name="unique_slug_per_user"
            ),
        ),
        migrations.AddField(
            model_name="trip",
            name="likes",
            field=models.ManyToManyField(
                blank=True, related_name="liked_trips", to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="tripreport",
            name="likes",
            field=models.ManyToManyField(
                blank=True, related_name="liked_reports", to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.CreateModel(
            name="Comment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("comment", models.TextField()),
                ("added", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True)),
                ("object_id", models.PositiveIntegerField()),
                (
                    "author",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "content_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
            ],
        ),
        migrations.AddIndex(
            model_name="comment",
            index=models.Index(
                fields=["content_type", "object_id"],
                name="logger_comm_content_0ff2fc_idx",
            ),
        ),
        migrations.RenameField(
            model_name="comment",
            old_name="comment",
            new_name="content",
        ),
        migrations.AlterModelOptions(
            name="comment",
            options={"ordering": ["-added"]},
        ),
    ]
