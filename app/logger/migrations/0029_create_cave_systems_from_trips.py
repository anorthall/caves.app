# Generated by Django 4.2.3 on 2023-07-29 21:25
from django.db import migrations
from django_countries import countries


def create_cave_systems_from_trips(apps, _schema_editor):
    """Create cave systems and entrances from existing trips."""
    print("\n\nCreating cave systems from trips...")
    trip = apps.get_model("logger", "Trip")
    cave_system = apps.get_model("caves", "CaveSystem")
    cave_entrance = apps.get_model("caves", "CaveEntrance")

    trips = trip.objects.all()
    total = len(trips)
    for i, t in enumerate(trips):
        if i % 1000 == 0:
            print(f"Processing trip {i} of {total}")
        process_trip(t, cave_system, cave_entrance)


def process_trip(t, cave_system, cave_entrance):
    """Try to find a system/entrance for the given trip, or create one if not found."""
    match = match_trip_to_system(t, cave_system, cave_entrance)
    if all(match):
        system, entered_by, exited_by = match
    else:
        system, entered_by, exited_by = create_new_system(t, cave_system, cave_entrance)

    assert all([system, entered_by, exited_by])
    t.entered_by = entered_by
    t.exited_by = exited_by
    t.system = system
    t.save()


def match_trip_to_system(t, cave_system, cave_entrance):
    """Try to match the given trip to an existing system."""
    name = t.cave_name.lower().strip()
    systems = cave_system.objects.filter(user=t.user, name__iexact=name)
    if not systems:
        return None, None, None

    matched_systems = []
    for candidate in systems:
        poor_match = False
        for ent in candidate.entrances.all():
            if t.cave_country and ent.country:
                if t.cave_country.lower().strip() != ent.country.name.lower().strip():
                    poor_match = True
            if t.cave_region and ent.region:
                if t.cave_region.lower().strip() != ent.region.lower().strip():
                    poor_match = True
            if t.cave_coordinates and ent.coordinates:
                distance_in_km = t.cave_coordinates.distance(ent.coordinates) * 100
                if distance_in_km > 10:  # could be a different entrance
                    poor_match = True

        if not poor_match:
            matched_systems.append(candidate)

    if not matched_systems:
        return None, None, None

    assert len(matched_systems) == 1
    system = matched_systems[0]
    if t.cave_entrance and t.cave_exit:
        entered_by, exited_by = None, None
        for ent in system.entrances:
            if ent.name.lower().strip() == t.cave_entrance.lower().strip():
                entered_by = ent
            if ent.name.lower().strip() == t.cave_exit.lower().strip():
                exited_by = ent

        if not entered_by:
            entered_by = cave_entrance.objects.create(
                system=system,
                name=t.cave_entrance,
                region=t.cave_region,
                location=t.cave_location,
                coordinates=t.cave_coordinates,
                country=match_country(t.cave_country),
            )

        if not exited_by:
            exited_by = cave_entrance.objects.create(
                system=system,
                name=t.cave_exit,
                region=t.cave_region,
                location=t.cave_location,
                coordinates=t.cave_coordinates,
                country=match_country(t.cave_country),
            )

        assert all([entered_by, exited_by])
        return system, entered_by, exited_by
    else:
        name = t.cave_entrance or t.cave_exit or t.cave_name
        assert name is not None

        try:
            ent = system.entrances.get(name__iexact=name)
        except cave_entrance.DoesNotExist:
            ent = None

        if not ent:
            ent = cave_entrance.objects.create(
                system=system,
                name=name,
                region=t.cave_region,
                location=t.cave_location,
                coordinates=t.cave_coordinates,
                country=match_country(t.cave_country),
            )
        return system, ent, ent


def create_new_system(t, cave_system, cave_entrance):
    # print(
    #     f"Creating new cave system '{t.cave_name}' "
    #     f"for {t.user.name}'s trip '{t.cave_name}' "
    #     f"via '{t.cave_entrance}' and '{t.cave_exit}'"
    # )
    system = cave_system.objects.create(
        name=t.cave_name,
        user=t.user,
    )

    if t.cave_entrance and t.cave_exit:
        # Create two entrances
        entrance = cave_entrance.objects.create(
            system=system,
            name=t.cave_entrance,
            region=t.cave_region,
            location=t.cave_location,
            coordinates=t.cave_coordinates,
            country=match_country(t.cave_country),
        )
        cave_exit = cave_entrance.objects.create(
            system=system,
            name=t.cave_exit,
            region=t.cave_region,
            location=t.cave_location,
            coordinates=t.cave_coordinates,
            country=match_country(t.cave_country),
        )
        # print(
        #     f"Created entrances '{entrance.name}' "
        #     f"and '{cave_exit.name}' for '{system.name}'"
        # )
        entered_by, exited_by = entrance, cave_exit
    else:
        name = t.cave_entrance or t.cave_exit or t.cave_name
        assert name is not None
        entrance = cave_entrance.objects.create(
            system=system,
            name=name,
            region=t.cave_region,
            location=t.cave_location,
            coordinates=t.cave_coordinates,
            country=match_country(t.cave_country),
        )
        # print(f"Created entrance '{entrance.name}' for '{system.name}'")
        entered_by, exited_by = entrance, entrance
    return system, entered_by, exited_by


def match_country(country: str) -> str:
    """Try to match the given country to a valid country code."""
    country = country.lower().strip()
    for code, name in countries:
        name = name.lower().strip()
        if name == country:
            return code
        elif code == country:
            return code
        elif "USA" == country:
            return "US"
        elif "united states" == country:
            return "US"
    raise ValueError(f"Could not match country '{country}'")


class Migration(migrations.Migration):
    dependencies = [
        ("logger", "0028_rename_entrance_trip_entered_by_trip_exited_by"),
    ]

    operations = [
        migrations.RunPython(create_cave_systems_from_trips),
    ]
