# Generated by Django 4.2 on 2023-04-25 08:23

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import django_countries.fields
import timezone_field.fields
from django.conf import settings
from django.db import IntegrityError, migrations, models, transaction


def copy_settings_data(apps, schema_editor):  # pragma: no cover
    CavingUser = apps.get_model("users", "CavingUser")
    UserSettings = apps.get_model("users", "UserSettings")
    for user in CavingUser.objects.all():
        try:  # Create settings
            with transaction.atomic():
                user.settings = UserSettings.objects.create(user=user)
                user.save()
        except IntegrityError:
            # User already has settings
            pass

        settings = user.settings
        settings.privacy = user.privacy
        settings.units = user.units
        settings.timezone = user.timezone
        settings.private_notes = user.private_notes
        settings.save()


def copy_profile_data(apps, schema_editor):  # pragma: no cover
    CavingUser = apps.get_model("users", "CavingUser")
    UserProfile = apps.get_model("users", "UserProfile")
    for user in CavingUser.objects.all():
        try:  # Create profile
            with transaction.atomic():
                user.profile = UserProfile.objects.create(user=user)
                user.save()
        except IntegrityError:
            # User already has profile
            pass

        profile = user.profile
        profile.name = user.name
        profile.location = user.location
        profile.country = user.country
        profile.bio = user.bio
        profile.clubs = user.clubs
        profile.page_title = user.profile_page_title
        profile.show_statistics = user.show_statistics
        profile.save()


def copy_show_statistics_setting(apps, schema_editor):  # pragma: no cover
    CavingUser = apps.get_model("users", "CavingUser")
    for user in CavingUser.objects.all():
        settings = user.settings
        settings.show_statistics = user.profile.show_statistics
        settings.save()


def copy_profile_name_to_user_name(apps, schema_editor):  # pragma: no cover
    CavingUser = apps.get_model("users", "CavingUser")
    for user in CavingUser.objects.all():
        user.name = user.profile.name
        user.save()


class Migration(migrations.Migration):
    replaces = [
        ("users", "0001_initial"),
        ("users", "0002_alter_cavinguser_timezone_alter_cavinguser_units"),
        ("users", "0003_cavinguser_profile_page_title_and_more"),
        ("users", "0004_alter_cavinguser_profile_page_title_and_more"),
        ("users", "0005_cavinguser_private_notes_alter_cavinguser_bio_and_more"),
        ("users", "0006_remove_cavinguser_first_name_and_more"),
        ("users", "0007_alter_cavinguser_name"),
        ("users", "0008_alter_cavinguser_privacy"),
        ("users", "0009_cavinguser_last_seen"),
        ("users", "0010_cavinguser_friends"),
        ("users", "0011_usersettings_userprofile"),
        ("users", "0012_remove_userprofile_id_remove_usersettings_id_and_more"),
        ("users", "0013_copy_profile_and_settings_data"),
        ("users", "0014_alter_usersettings_options_remove_cavinguser_name"),
        ("users", "0015_remove_cavinguser_bio_remove_cavinguser_clubs_and_more"),
        ("users", "0016_alter_userprofile_friends_alter_userprofile_name"),
        ("users", "0017_usersettings_show_statistics"),
        ("users", "0018_copy_show_statistics"),
        ("users", "0019_remove_userprofile_show_statistics"),
        ("users", "0020_notification_friendrequest_and_more"),
        ("users", "0021_alter_userprofile_name"),
        ("users", "0022_alter_userprofile_name"),
        ("users", "0023_usersettings_allow_comments_and_more"),
        ("users", "0024_cavinguser_name"),
        ("users", "0025_copy_profile_name_to_user_name"),
        ("users", "0026_remove_userprofile_name"),
    ]

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="CavingUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        help_text="This will be verified before you can log in.",
                        max_length=255,
                        unique=True,
                        verbose_name="email address",
                    ),
                ),
                (
                    "username",
                    models.SlugField(
                        help_text="A unique identifier that will be part of the web address for your logbook.",
                        max_length=30,
                        unique=True,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Your name as you would like it to appear on your public profile.",
                        max_length=30,
                    ),
                ),
                ("location", models.CharField(blank=True, max_length=50)),
                (
                    "country",
                    django_countries.fields.CountryField(blank=True, max_length=2),
                ),
                (
                    "bio",
                    models.TextField(
                        blank=True,
                        help_text="Information about you that will be displayed on your public profile.",
                        verbose_name="biography",
                    ),
                ),
                (
                    "clubs",
                    models.CharField(
                        blank=True,
                        help_text="A list of caving clubs or organisations that you are a member of.",
                        max_length=50,
                    ),
                ),
                (
                    "units",
                    models.CharField(
                        choices=[("Metric", "Metric"), ("Imperial", "Imperial")],
                        default="Metric",
                        help_text="Preferred units of distance.",
                        max_length=10,
                        verbose_name="Distance units",
                    ),
                ),
                (
                    "privacy",
                    models.CharField(
                        choices=[
                            ("Public", "Anyone"),
                            ("Friends", "Only my friends"),
                            ("Private", "Only me"),
                        ],
                        default="Private",
                        help_text="Who can view your profile?",
                        max_length=10,
                        verbose_name="Profile privacy",
                    ),
                ),
                (
                    "timezone",
                    timezone_field.fields.TimeZoneField(
                        choices_display="WITH_GMT_OFFSET",
                        default="Europe/London",
                        help_text="Timezone to enter and display dates and times in.",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=False,
                        help_text="Only enabled users are able to sign in. Users are disabled until their email is verified.",
                        verbose_name="Enabled user",
                    ),
                ),
                ("date_joined", models.DateTimeField(auto_now_add=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
                (
                    "profile_page_title",
                    models.CharField(
                        blank=True,
                        help_text="A title to display on your profile page (if enabled). If left blank it will use your full name.",
                        max_length=50,
                    ),
                ),
                (
                    "show_statistics",
                    models.BooleanField(
                        default=True,
                        help_text="Check this box to show a statistics table on your public profile (if enabled).",
                        verbose_name="Show statistics",
                    ),
                ),
                (
                    "private_notes",
                    models.BooleanField(
                        default=True,
                        help_text="Check this box to prevent your trip notes being displayed on your public profile (if enabled).",
                        verbose_name="Keep notes private",
                    ),
                ),
                ("last_seen", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "friends",
                    models.ManyToManyField(blank=True, to=settings.AUTH_USER_MODEL),
                ),
            ],
            options={
                "verbose_name": "user",
            },
        ),
        migrations.CreateModel(
            name="UserSettings",
            fields=[
                (
                    "units",
                    models.CharField(
                        choices=[("Metric", "Metric"), ("Imperial", "Imperial")],
                        default="Metric",
                        help_text="Preferred units of distance.",
                        max_length=10,
                        verbose_name="Distance units",
                    ),
                ),
                (
                    "privacy",
                    models.CharField(
                        choices=[
                            ("Public", "Anyone"),
                            ("Friends", "Only my friends"),
                            ("Private", "Only me"),
                        ],
                        default="Private",
                        help_text="Who can view your profile?",
                        max_length=10,
                        verbose_name="Profile privacy",
                    ),
                ),
                (
                    "timezone",
                    timezone_field.fields.TimeZoneField(
                        choices_display="WITH_GMT_OFFSET",
                        default="Europe/London",
                        help_text="Timezone to enter and display dates and times in.",
                    ),
                ),
                (
                    "private_notes",
                    models.BooleanField(
                        default=True,
                        help_text="Check this box to prevent your trip notes being displayed on your public profile (if enabled).",
                        verbose_name="Keep notes private",
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        related_name="settings",
                        serialize=False,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="UserProfile",
            fields=[
                (
                    "name",
                    models.CharField(
                        default="Caver",
                        help_text="Your name as you would like it to appear on your public profile.",
                        max_length=30,
                    ),
                ),
                (
                    "avatar",
                    models.ImageField(
                        blank=True,
                        help_text="A profile picture to display on your public profile.",
                        upload_to="avatars/",
                    ),
                ),
                ("location", models.CharField(blank=True, max_length=50)),
                (
                    "country",
                    django_countries.fields.CountryField(blank=True, max_length=2),
                ),
                (
                    "bio",
                    models.TextField(
                        blank=True,
                        help_text="Information about you that will be displayed on your public profile.",
                        verbose_name="biography",
                    ),
                ),
                (
                    "clubs",
                    models.CharField(
                        blank=True,
                        help_text="A list of caving clubs or organisations that you are a member of.",
                        max_length=50,
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        related_name="profile",
                        serialize=False,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "page_title",
                    models.CharField(
                        blank=True,
                        help_text="A title to display on your profile page (if enabled). If left blank it will use your full name.",
                        max_length=50,
                    ),
                ),
                (
                    "show_statistics",
                    models.BooleanField(
                        default=True,
                        help_text="Check this box to show a statistics table on your public profile (if enabled).",
                        verbose_name="Show statistics",
                    ),
                ),
            ],
        ),
        migrations.RunPython(
            code=copy_settings_data,
        ),
        migrations.RunPython(
            code=copy_profile_data,
        ),
        migrations.AlterModelOptions(
            name="usersettings",
            options={"verbose_name_plural": "user settings"},
        ),
        migrations.RemoveField(
            model_name="cavinguser",
            name="name",
        ),
        migrations.RemoveField(
            model_name="cavinguser",
            name="bio",
        ),
        migrations.RemoveField(
            model_name="cavinguser",
            name="clubs",
        ),
        migrations.RemoveField(
            model_name="cavinguser",
            name="country",
        ),
        migrations.RemoveField(
            model_name="cavinguser",
            name="friends",
        ),
        migrations.RemoveField(
            model_name="cavinguser",
            name="location",
        ),
        migrations.RemoveField(
            model_name="cavinguser",
            name="privacy",
        ),
        migrations.RemoveField(
            model_name="cavinguser",
            name="private_notes",
        ),
        migrations.RemoveField(
            model_name="cavinguser",
            name="profile_page_title",
        ),
        migrations.RemoveField(
            model_name="cavinguser",
            name="show_statistics",
        ),
        migrations.RemoveField(
            model_name="cavinguser",
            name="timezone",
        ),
        migrations.RemoveField(
            model_name="cavinguser",
            name="units",
        ),
        migrations.AddField(
            model_name="userprofile",
            name="friends",
            field=models.ManyToManyField(blank=True, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name="userprofile",
            name="name",
            field=models.CharField(
                default="Caver",
                help_text="Your name as you would like it to appear on your public profile.",
                max_length=40,
            ),
        ),
        migrations.AddField(
            model_name="usersettings",
            name="show_statistics",
            field=models.BooleanField(
                default=True,
                help_text="Check this box to show a statistics table on your public profile (if enabled).",
                verbose_name="Show statistics",
            ),
        ),
        migrations.RunPython(
            code=copy_show_statistics_setting,
        ),
        migrations.RemoveField(
            model_name="userprofile",
            name="show_statistics",
        ),
        migrations.CreateModel(
            name="Notification",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("message", models.CharField(max_length=255)),
                ("url", models.URLField(max_length=255, verbose_name="URL")),
                (
                    "read",
                    models.BooleanField(
                        default=False,
                        help_text="Has the notification been read by the user?",
                    ),
                ),
                ("added", models.DateTimeField(auto_now_add=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="FriendRequest",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                (
                    "user_from",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="friend_requests_sent",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user_to",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="friend_requests_received",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.AddConstraint(
            model_name="friendrequest",
            constraint=models.UniqueConstraint(
                fields=("user_from", "user_to"), name="unique_friend_request"
            ),
        ),
        migrations.AlterField(
            model_name="userprofile",
            name="name",
            field=models.CharField(
                default="Caver",
                help_text="Your name as you would like it to appear on your public profile.",
                max_length=25,
            ),
        ),
        migrations.AlterField(
            model_name="userprofile",
            name="name",
            field=models.CharField(
                default="Caver",
                help_text="Your name as you would like it to appear on your public profile.",
                max_length=25,
                validators=[django.core.validators.MinLengthValidator(3)],
            ),
        ),
        migrations.AddField(
            model_name="usersettings",
            name="allow_comments",
            field=models.BooleanField(
                default=True,
                help_text="If enabled, other users will be able to comment on your trips and trip reports. Disabling this setting will not delete any existing comments, but will hide them until it is re-enabled.",
                verbose_name="Allow comments on your trips",
            ),
        ),
        migrations.AddField(
            model_name="usersettings",
            name="allow_friend_email",
            field=models.BooleanField(
                default=False,
                help_text="If enabled, other users will be able to add you as a friend by entering your email address. This will not affect your ability to add other users as friends.",
                verbose_name="Allow friend requests by email",
            ),
        ),
        migrations.AddField(
            model_name="usersettings",
            name="allow_friend_username",
            field=models.BooleanField(
                default=True,
                help_text="If enabled, other users will be able to add you as a friend by entering your username. This will not affect your ability to add other users as friends.",
                verbose_name="Allow friend requests by username",
            ),
        ),
        migrations.AddField(
            model_name="cavinguser",
            name="name",
            field=models.CharField(
                default="Caver",
                help_text="Your name as you would like it to appear on your public profile.",
                max_length=25,
                validators=[django.core.validators.MinLengthValidator(3)],
            ),
        ),
        migrations.RunPython(
            code=copy_profile_name_to_user_name,
        ),
        migrations.RemoveField(
            model_name="userprofile",
            name="name",
        ),
    ]
